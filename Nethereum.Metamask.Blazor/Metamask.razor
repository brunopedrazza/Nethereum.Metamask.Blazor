@using Nethereum.UI
@inject IEthereumHostProvider _metamaskHostProvider
@inject NethereumAuthenticator  _nethereumAuthenticator

<div>
    @if (ProviderAvailable && !string.IsNullOrEmpty(SelectedAccount))
    {
        <div>
            @SelectedAccount
        </div>
        <div>
            <button type="button" @onclick="@DisconnectAsync">Logout</button>
        </div>
    }

    @if (!ProviderAvailable || string.IsNullOrEmpty(SelectedAccount))
    {
        <button type="button" class="btnMetamask" @onclick="@ConnectAsync">Connect Wallet</button>
    }

</div>

@code {

    bool ProviderAvailable { get; set; }
    string SelectedAccount { get; set; }
    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
            _metamaskHostProvider.AvailabilityChanged += MetamaskHostProvider_ProviderAvailableChanged;

            ProviderAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();

            StateHasChanged();
        }
    }

    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        this.StateHasChanged();
    }

    private async Task MetamaskHostProvider_ProviderAvailableChanged(bool available)
    {
        ProviderAvailable = available;
        this.StateHasChanged();
    }

    protected async Task ConnectAsync()
    {
        SelectedAccount = await _metamaskHostProvider.EnableProviderAsync();
    }

    protected async Task DisconnectAsync()
    {
        await _metamaskHostProvider.DisconnectProviderAsync();
    }

    public async Task AuthenticateAsync()
    {
        AuthenticatedAccount = await _nethereumAuthenticator.RequestNewChallengeSignatureAndRecoverAccountAsync();
    }
}
